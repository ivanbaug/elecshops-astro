---

---
<nav aria-label="Page navigation" class="flex flex-col items-center">
    <span class="text-sm text-gray-700 dark:text-gray-400">
        Showing <span id="pageFirstRow" class="font-semibold text-gray-900 dark:text-white">0</span> to <span id="pageLastRow" class="font-semibold text-gray-900 dark:text-white">0</span> of <span id="totalRows" class="font-semibold text-gray-900 dark:text-white">0</span> Entries
    </span>
    <ul id="paginationButtons" class="inline-flex items-center md:-space-x-px">
    </ul>
</nav>

<script>
    import { $tableQueryParams } from '../stores/tableQueryParamsStore';
    import { $paginationData, PaginationData } from '../stores/paginationDataStore';
    

    function updatePagination(pd: PaginationData) {
        const pageFirstRow = document.getElementById("pageFirstRow") as HTMLSpanElement;
        const pageLastRow = document.getElementById("pageLastRow") as HTMLSpanElement;
        const totalRows = document.getElementById("totalRows") as HTMLSpanElement;
        const paginationButtons = document.getElementById("paginationButtons") as HTMLUListElement
        pageFirstRow.innerText = ''+((pd.page-1)*pd.per_page+1);
        pageLastRow.innerText = ''+Math.min(pd.page*pd.per_page, pd.total);
        totalRows.innerText = ''+pd.total;
        paginationButtons.innerHTML = '';
        // Add previous button
        const prev = buildPagButton(0, pd.page, 'prev', pd.page === 1);
        paginationButtons.appendChild(prev);
        // Add page buttons
        const pagesToView = 2;
        let minpage = pd.page-pagesToView-1;
        let maxpage = pd.page+pagesToView+1;
        if (minpage<1) {
            maxpage = maxpage - minpage;
        }
        if (maxpage>pd.page_qty) {
            minpage = minpage-(maxpage-pd.page_qty-1);
        }

        for (let i=Math.max(1,minpage); i<=Math.min(pd.page_qty,maxpage); i++){
            const li = buildPagButton(i, pd.page, i===minpage || i===maxpage ? 'ellipses' : '');
            paginationButtons.appendChild(li);
        }
        // Add next button
        const nxt = buildPagButton(0, pd.page, 'nxt', pd.page === pd.page_qty || pd.page_qty <= 1);
        paginationButtons.appendChild(nxt);
    }

    function buildPagButton(n:number, currentPage: number, btnType?:string, btnDisabled?:boolean){
        const li = document.createElement('li') as HTMLLIElement;
        const btn = document.createElement('button') as HTMLButtonElement;
        if (btnType === 'prev') {
        btn.className = "block px-3 py-2 ml-0 leading-tight text-gray-500 bg-white border border-gray-300 rounded-l-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-70 disabled:hover:bg-white disabled:hover:text-gray-500 disabled:dark:hover:bg-gray-800 disabled:dark:hover:text-gray-400";
        btn.innerHTML = `<svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd"></path></svg>`;
        if (btnDisabled) {
            btn.disabled = true;
        } else {
            btn.onclick = () => {
            $tableQueryParams.setKey('page', currentPage - 1 );
            };
        }
        } else if (btnType === 'nxt') {
        btn.className = "block px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 rounded-r-lg hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-70 disabled:hover:bg-white disabled:hover:text-gray-500 disabled:dark:hover:bg-gray-800 disabled:dark:hover:text-gray-400";
        btn.innerHTML = `<svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path></svg>`;
        if (btnDisabled) {
            btn.disabled = true;
        } else {
            btn.onclick = () => {
            $tableQueryParams.setKey('page', currentPage + 1 );
            };
        }
        } else {
        btn.className = n === currentPage ? "block z-10 px-3 py-2 leading-tight text-blue-600 border border-blue-300 bg-blue-50 hover:bg-blue-100 hover:text-blue-700 dark:border-gray-700 dark:bg-gray-700 dark:text-white" : "px-3 py-2 leading-tight text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white disabled:opacity-70 disabled:hover:bg-white disabled:hover:text-gray-500 disabled:dark:hover:bg-gray-800 disabled:dark:hover:text-gray-400 hidden md:block";
        btn.innerText = btnType === 'ellipses' ? '...' : ''+n; // show ellipses if the page is above or below the threshold
        btn.onclick = () => {
            $tableQueryParams.setKey('page', n );
        };
        }
        li.appendChild(btn);
        return li;
  }
  $paginationData.listen((pd, changedKey)=>{
    updatePagination(pd);
  });
</script>